~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~RabbitMQ Messaging Queue~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

1) What is Message Queue?

Message queuing allows applications to communicate by sending messages to each other. The message queue provides temprorary message storage when the destination program is busy or not connected.

A message queue is made up of a producer, a broker(the message queue software) and a consumer.

A message queue provides an asychronous communication between applications.

		 _______________					 ___________________					 _______________
		| 				|	Message			|					|	Message			|				|
		|	Producer	| -----------> 		|	Message Broker	| ------------->	|	Consumer	|
		|_______________|					|___________________|					|_______________|

2) RabbitMQ is a message queue software(message broker/queue manager) that acts as an intermediary platform where different applications can send and receive messages.

RabbitMQ originally implements the Advanced Message Queuing Protocol (AMQP). But now RabbitMQ also supports several other API protocols such as STOMP, MQTT and HTTP.

	i) STOMP ==> Simple or Streaming Text Orientated Messaging Protocol. It is similar to HTTP and works over TCP using commands - CONNECT, SEND, SUBSCRIBE, UNSUBSCRIBE, BEGIN, COMMIT, ACK, ABORT, NACK, DISCONNECT etc.

	ii) MQTT ==> Message Queuing Telemetry Transport, is designed for IOT devices with extremely high-latency and low-bandwidth. It is perfect protocol for machine to machine communication. It is a TCP based protocol relying on the publish-subscribe model.

	iii) HTTP ==> Hyper Text Transfer Protocol. 4XX --> Client Mistake, 5XX --> Error on the Server

		 _______________					 _______________________					 _______________
		| 				|	Message			|						|	Message			|				|
		|	Producer	| --------------------> Exchnge ---> Queue ---------------->	|	Consumer	|
		|_______________|					|						|					|_______________|
											|  (Message Broker or	|
											|	RabbitMQ Broker)	|
											|_______________________|					


										_____________________		event
	(Service of 			event		|					|	--------------------> (Serivce of MicroService-2)
	MicroService-1)	----------------->  |	Message Broker	| 		event
										|___________________|	--------------------> (Service of MicroService-3)


Producer ==> Producer is an application that sends messages to the RabbitMQ broker. Producer sends messages with Routing Key to Exchange and Exhange use Routing key to send message to the queue. 

Consumer ==> Consumer is an application that reads messages to the RabbitMQ broker. Consumer can be mutiple to read messages from the RabbitMQ broker.

Queue ==> Queue is a buffer or storage in a RabbitMQ broker to store the messages. The messages are put into a queue by a producer and read from it by a consumer. Once a message is read, it is consumed and removed from the queue. A message can thus only be processed exactly once.

Message ==> Information that is sent from the producer to a consumer through RabbitMQ broker. It can string, json, html, ......

Exchange ==> It acts as an intermediary between the producer and a queue. Instead of sending messages directly to a queue, a producer can send them to an exchange. The exchange then sends these messages to one or more queues following a specified set of rules. Thus producer does not need to know the queues that eventually receive those messages.

Routing Key ==> The routing key is a key that the exchange looks at to decide how to route the message to queues. The routing key is like an address for the message.

	
							 _______________		Routing Key
							|				|	--------------------> Queue ---------> Consumer
							|	Exchange	|
	Producer  ------------> |				|		Routing Key
							|_______________|	--------------------> Queue ---------> Consumer


Binding ==> A binding is a link between a queue and an exchange.

Commands:
1) docker pull rabbitmq:3.13.3-management ==> to install rabbitmq docker
2) docker run --rm -it -p 15672:15672 -p 5672:5672 rabbitmq:3.13.3-management ==> to run rabbitmq

port 15672 ==> is for rabbitmq management website ==> use localhost:15672 to see rabbitmq management, bydefault username: guest, password: guest

port 5672 ==> is used for the rabbitmq client connection


*******************************RabbitMQ connection with spring boot********************************
1) Add dependency in pom file 
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-amqp</artifactId>
		</dependency>

2) Add Config for Queue, Exchange and Binding
	// spring bean for rabbitmq queue
	@Bean
    public Queue queue() {
        return new Queue(queueName);
    }

    // spring bean for rabbitmq exchange
    @Bean
    public TopicExchange exchange() {
        return new TopicExchange(exchangeName);
    }

    // binding between queue and exchange using routing key
    @Bean
    public Binding binding() {
        return BindingBuilder
                .bind(queue())
                .to(exchange())
                .with(routingKey);
    }

    ** ConnectionFactory, RabbitTemplate, RabbitAdmin these configuration privided by spring boot so no need to configure these beans **

    RabbitTemplate ==> It is for send the messages. Spring boot automatically configure RabbitTamplate for us. We just need to inject and use it.

3) Implement Producer

	@Component
	public class RabbitMQProducer {

	    @Value("${rabbitmq.exchange.name}")
	    private String exchange;

	    @Value("${rabbitmq.routing.key}")
	    private String routingKey;

	    private final RabbitTemplate rabbitTemplate;

	    private static final Logger LOGGER = LoggerFactory.getLogger(RabbitMQProducer.class);

	    public RabbitMQProducer(RabbitTemplate rabbitTemplate) {
	        this.rabbitTemplate = rabbitTemplate;
	    }

	    public void sendMessage(String message) {
	        LOGGER.info(String.format("Message sent -> %s", message));
	        rabbitTemplate.convertAndSend(exchange, routingKey, message);
	    }
	}

4) Implement Consumer
	@Component
	public class RabbitMQConsumer {

	    private static final Logger LOGGER = LoggerFactory.getLogger(RabbitMQConsumer.class);

	    @RabbitListener(queues = {"${rabbitmq.queue.name}"})
	    public void consumeMessage(String message) {
	        LOGGER.info(String.format("Received Message -> %s", message));
	    }
	}

// For json message

1) create queue, exchange, routing key similar as in earlier

2) Add some extra config

	//bean for message convertor to support json message
    @Bean
    public MessageConverter converter() {
        return new Jackson2JsonMessageConverter();
    }

    // Create RabbitTemplate to send message of json type
    // by default spring boot provide which support string type
    @Bean
    public AmqpTemplate amqpTemplate(ConnectionFactory connectionFactory) {
        RabbitTemplate rabbitTemplate = new RabbitTemplate(connectionFactory);
        rabbitTemplate.setMessageConverter(converter());
        return rabbitTemplate;
    }

3) Add Producer and Consumer as earlier

~~~~~~~~~~~~~~~~~~~~~~~Event Driven Architecture~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Event driven architecture (EDA) is a software design pattern in which decoupled applications can synchronously publish and subscribe to events via an event broker/message broker. An even driven architecture is loosely coupled.





